{planttest
 {:args [plant],
  :meta {:doc "Plant Test"},
  :methods
  {main
   [{:args [],
     :betweens [],
     :body
     [{:type :sequence,
       :body
       [{:type :method-fn,
         :method-ref {:type :pclass-arg-ref, :names [plant hardwork]},
         :args [10],
         :temporal-constraints [{:type :bounds, :value [10 20]}]}
        {:type :method-fn,
         :method-ref {:type :pclass-arg-ref, :names [plant scp]},
         :args ["bigfile" "me@192.168.11.100:~me/copyofbigfile"],
         :temporal-constraints [{:type :bounds, :value [0 99]}]}
        {:type :method-fn,
         :method-ref {:type :pclass-arg-ref, :names [plant cp]},
         :args ["bigfile" "copyofbigfile"],
         :temporal-constraints [{:type :bounds, :value [0 99]}]}
        {:type :method-fn,
         :method-ref {:type :pclass-arg-ref, :names [plant shell]},
         :args ["ls" "-lart" ">" "foo"],
         :temporal-constraints [{:type :bounds, :value [0 99]}]}
        {:type :method-fn,
         :method-ref {:type :pclass-arg-ref, :names [plant python]},
         :args ["myscript.py" "2" "3" "4" "5"],
         :temporal-constraints [{:type :bounds, :value [0 99]}]}
        {:type :delay,
         :body nil,
         :temporal-constraints [{:type :bounds, :value [3 3]}]}
        {:type :method-fn,
         :method-ref {:type :pclass-arg-ref, :names [plant stop]},
         :args ["McDonalds"]}]}],
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Main",
     :doc "The HTN",
     :post true,
     :pre true,
     :primitive false,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}]},
  :type :pclass},
 simple-plant-demo
 {:args [],
  :fields
  {run
   {:access :private,
    :initial
    {:args [{:type :field-ref, :names [sp1]}],
     :pclass planttest,
     :type :pclass-ctor},
    :observable false},
   sp1
   {:access :private,
    :initial
    {:args [],
     :pclass simpleplant,
     :plant-id "myplant",
     :plant-interface "RMQ",
     :plant-part "mypart",
     :type :pclass-ctor},
    :observable false}},
  :type :pclass},
 simpleplant
 {:args [],
  :meta {:doc "The Simple Plant Example"},
  :methods
  {cp
   [{:args [fromfile tofile],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [fromfile tofile],
     :display-name "Cp",
     :doc "local file copy",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   hardwork
   [{:args [time],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [time],
     :display-name "Hardwork",
     :doc "Simulated work with a simulated failure",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [1 20]}]}],
   python
   [{:args [script options arg1 arg2 arg3],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [script options arg1 arg2 arg3],
     :display-name "Python",
     :doc "Runs a python script",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   scp
   [{:args [fromfile tofile],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [fromfile tofile],
     :display-name "Scp",
     :doc "Secure network file copy",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [10 20]}]}],
   shell
   [{:args [cmd arg1 arg2 arg3],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [cmd arg1 arg2 arg3],
     :display-name "Shell",
     :doc "Runs a command-line program",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 3]}]}],
   stop
   [{:args [area],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [area],
     :display-name "Stop",
     :doc "Stops the plant",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 1]}]}]},
  :type :pclass}}
