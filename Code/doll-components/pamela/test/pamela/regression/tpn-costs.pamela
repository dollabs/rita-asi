;; Copyright Â© 2016 Dynamic Object Language Labs Inc.
;;
;; This software is licensed under the terms of the
;; Apache License, Version 2.0 which can be found in
;; the file LICENSE at the root of this distribution.

;;; Acknowledgement and Disclaimer:
;;; This material is based upon work supported by the Army Contracting
;;; and DARPA under contract No. W911NF-15-C-0005.
;;; Any opinions, findings and conclusions or recommendations expressed
;;; in this material are those of the author(s) and do necessarily reflect the
;;; views of the Army Contracting Command and DARPA.

;; A TPN with costs and rewards

(defpclass plant []
  :meta {:doc "The Plant API"}
  :methods [(defpmethod do-a
              {:bounds [2 4] :cost 1}
              [])
            (defpmethod do-b
              {:bounds [3 6] :reward 3}
              [])
            (defpmethod do-c
              {} ;; {:bounds [85 90]}
              [])
            (defpmethod do-d
              {:bounds [1 7]}
              [])
            (defpmethod do-e
              {:bounds [9 16]}
              [])
            (defpmethod do-f
              {:bounds [1 3]}
              [])
            (defpmethod do-g
              {:bounds [2 5] :cost 3}
              [])])

(defpclass tpn-costs [plnt]
  :meta {:doc "A TPN example with costs and rewards."}
  :methods [(defpmethod start
              {:doc "TPN method"}
              []
              (parallel :bounds [1 100] :cost<= 11 :reward>= 6
                (sequence :cost<= 4 :reward>= 2
                  (plnt.do-a)
                  (plnt.do-b :label :b))
                (sequence
                  (choose :label :choice :cost<= 10 :reward>= 5
                    (choice
                      (sequence
                        (plnt.do-d :cost 1 :reward 2)
                        (plnt.do-e :cost 2 :reward 1)))
                    (choice
                      (sequence
                        (plnt.do-f :cost 3 :reward 1)
                        (plnt.do-g :cost 4))))
                  (plnt.do-c)))
              (between :choice :b :bounds [1 50] :cost<= 7 :reward>= 1))])
