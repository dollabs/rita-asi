;; Copyright Â© 2016 Dynamic Object Language Labs Inc.
;;
;; This software is licensed under the terms of the
;; Apache License, Version 2.0 which can be found in
;; the file LICENSE at the root of this distribution.

;; Acknowledgement and Disclaimer:
;; This material is based upon work supported by the Army Contracting
;; and DARPA under contract No. W911NF-15-C-0005.
;; Any opinions, findings and conclusions or recommendations expressed
;; in this material are those of the author(s) and do necessarily reflect the
;; views of the Army Contracting Command and DARPA.

(defpclass plant []
  :meta {:doc "The Plant API"}
  :methods [(defpmethod do-a
              {:bounds [2 4]
               :display-name "Due Eh"}
              [])
            (defpmethod do-b
              {:bounds [3 6]
               :controllable true}
              [])
            (defpmethod do-c
              {:bounds [4 8]
               :cost 4}
              [])
            (defpmethod do-d
              {:primitive true}
              []
              (delay :bounds [0 1]))
            (defpmethod do-e
              {:bounds [5 10]
               :reward 5}
              [])])

(defpclass infeasible-sequence [plnt]
  :meta {:doc "An example of infeasible sequence of activties"}
  :methods [(defpmethod start
              {:doc "Simple TPN with constraints"}
              []
              (sequence :bounds [10 30]
                (plnt.do-a)
                (plnt.do-b)
                (plnt.do-c)
                (plnt.do-d)
                (plnt.do-e)))])

;; NOTE this pclass must be defined to make the plant instantiation
;; explicit. Root-task: (infeasible-sequence-demo.run.start)
(defpclass infeasible-sequence-demo []
  :fields {p1 (plant :id "p1" :plant-part "t1" :interface "RMQ")
           run (infeasible-sequence p1)})
