;; Copyright Â© 2016 Dynamic Object Language Labs Inc.
;;
;; This software is licensed under the terms of the
;; Apache License, Version 2.0 which can be found in
;; the file LICENSE at the root of this distribution.

;; Acknowledgement and Disclaimer:
;; This material is based upon work supported by the Army Contracting
;; and DARPA under contract No. W911NF-15-C-0005.
;; Any opinions, findings and conclusions or recommendations expressed
;; in this material are those of the author(s) and do necessarily reflect the
;; views of the Army Contracting Command and DARPA.

;; A feasible sequence of few activities

;; Compile as:
;; TPN only
;; pamela -i sequence.feasible.pamela -o sequence.feasible.cfm.tpn.json -c htn-main:sf:main tpn
;; HTN and TPN:
;; pamela -i sequence.feasible.pamela -o sequence.feasible -t "(htn-main.main)" htn

(defpclass plant []
           :meta {:doc "The Plant API"}
           :methods [(defpmethod do-a {:bounds [2 4]} [])
                     (defpmethod do-b {:bounds [3 6]} [])
                     (defpmethod do-c {:bounds [4 8]} [])
                     (defpmethod do-d {:bounds [1 2]} [])
                     (defpmethod do-e {:bounds [5 10]} [])])

(defpclass sequence-feasible [plnt]
           :meta {:doc "An example of infeasible sequence of activties"}
           ;:fields {
           ;         ;plnt (plant)
           ;         ;main (sequence-feasible plnt); TODO This does not compile
           ;         }
           ;:fields {} ; TODO this does not compile
           :methods [(defpmethod main
                                 {:doc "Simple TPN with constraints"}
                                 []
                                 (sequence :bounds [15 30]
                                           (plnt.do-a)
                                           (plnt.do-b)
                                           (plnt.do-c)
                                           (plnt.do-d)
                                           (plnt.do-e)))])

(defpclass htn-main []
           :meta {:doc "Main class for HTN"}
           :fields {plnt (plant)
                    sf (sequence-feasible plnt)}
           :methods [(defpmethod main []
                                 (sf.main))])
