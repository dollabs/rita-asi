;; Copyright Â© 2016 Dynamic Object Language Labs Inc.
;;
;; This software is licensed under the terms of the
;; Apache License, Version 2.0 which can be found in
;; the file LICENSE at the root of this distribution.

(defpclass plant []
  :meta {:doc "The Plant API"}

  :methods [(defpmethod do-a {:bounds [2 4]} [])
            (defpmethod do-b {:bounds [3 6]} [])
            (defpmethod do-c {:bounds [85 90]} [])
            (defpmethod do-d {:bounds [1 7]} [])
            (defpmethod do-e {:bounds [9 16]} [])
            (defpmethod do-f {:bounds [1 3]} [])
            (defpmethod do-g {:bounds [2 5]} [])])

;; This is a placeholder for the more complete, TPN-centric version:
(defpclass first-tpn [plnt]
  :meta {:doc "Placeholder. "})

(defpclass first-tpn-htn [plnt]
  :meta {:doc "A example with constraints. "}

  :methods [(defpmethod start
              {:doc "Simple TPN with constraints"}
              []
              (parallel :label :start :bounds [1 100]
                ;; (do-a-and-b :label :start-0) ;; non-canonical label
                (do-a-and-b)
                ;; (do-choice-and-c :label :start-1)) ;; non-canonical label
                (do-choice-and-c))
              (between :do-choice :b :bounds [1 101])
              (between-starts :c :b :bounds [2 46] :cost<= 8)
              (between-ends :b :c :bounds [3 57] :reward>= 9))

            (defpmethod do-a-and-b
              []
              (sequence :label :do-a-and-b ;; canonical label
                (plnt.do-a :label :a :bounds [2 4])
                (plnt.do-b :label :b :bounds [3 6])))
            (defpmethod do-choice-and-c
              []
              (sequence :label :do-choice-and-c ;; canonical label
                ;; (do-choice :label :do-choice-and-c-0) ;; non-canonical label
                (do-choice)
                (plnt.do-c :label :c :bounds [85 90])))
            (defpmethod do-choice
              []
              (choose :label :do-choice ;:max-cost 10 :min-reward 5 ;; canonical label
                (choice
                  ;; (do-d-and-e :label :d-e)) ;; non-canonical label
                  (do-d-and-e))
                (choice
                  ;; (do-f-and-g :label :f-g)))) ;; non-canonical label
                  (do-f-and-g))))
            (defpmethod do-d-and-e
              []
              (sequence :label :do-d-and-e ;; canonical label
                (plnt.do-d :label :d :cost 1 :reward 2 :bounds [1 7])
                (plnt.do-e :label :e :cost 2 :reward 1 :bounds [9 16])))
            (defpmethod do-f-and-g
              []
              (sequence :label :do-f-and-g ;; canonical label
                (plnt.do-f :label :f :cost 3 :reward 1 :bounds [1 3])
                (plnt.do-g :label :g :cost 4 :bounds [2 5])))])

(defpclass main []
  :fields {plnt (plant)
           tpn (first-tpn plnt)})

(defpclass main-htn []
  :fields {plnt (plant)
           tpn (first-tpn-htn plnt)})
