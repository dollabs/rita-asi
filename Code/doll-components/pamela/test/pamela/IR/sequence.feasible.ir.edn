{htn-main
 {:args [],
  :fields
  {plnt
   {:access :private,
    :initial {:args [], :pclass plant, :type :pclass-ctor},
    :observable false},
   sf
   {:access :private,
    :initial
    {:args [{:type :field-ref, :names [plnt]}],
     :pclass sequence-feasible,
     :type :pclass-ctor},
    :observable false}},
  :meta {:doc "Main class for HTN"},
  :methods
  {main
   [{:args [],
     :betweens [],
     :body
     [{:type :method-fn,
       :method-ref {:type :field-ref, :names [sf main]},
       :args []}],
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Main",
     :post true,
     :pre true,
     :primitive false,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}]},
  :type :pclass},
 plant
 {:args [],
  :meta {:doc "The Plant API"},
  :methods
  {do-a
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Do A",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [2 4]}]}],
   do-b
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Do B",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [3 6]}]}],
   do-c
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Do C",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [4 8]}]}],
   do-d
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Do D",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [1 2]}]}],
   do-e
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Do E",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [5 10]}]}]},
  :type :pclass},
 sequence-feasible
 {:args [plnt],
  :meta {:doc "An example of infeasible sequence of activties"},
  :methods
  {main
   [{:args [],
     :betweens [],
     :body
     [{:type :sequence,
       :body
       [{:type :method-fn,
         :method-ref {:type :pclass-arg-ref, :names [plnt do-a]},
         :args []}
        {:type :method-fn,
         :method-ref {:type :pclass-arg-ref, :names [plnt do-b]},
         :args []}
        {:type :method-fn,
         :method-ref {:type :pclass-arg-ref, :names [plnt do-c]},
         :args []}
        {:type :method-fn,
         :method-ref {:type :pclass-arg-ref, :names [plnt do-d]},
         :args []}
        {:type :method-fn,
         :method-ref {:type :pclass-arg-ref, :names [plnt do-e]},
         :args []}],
       :temporal-constraints [{:type :bounds, :value [15 30]}]}],
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Main",
     :doc "Simple TPN with constraints",
     :post true,
     :pre true,
     :primitive false,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}]},
  :type :pclass}}
