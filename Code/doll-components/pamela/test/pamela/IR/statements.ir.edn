{bar {:type :state-variable},
 door {:type :state-variable},
 foo {:type :state-variable},
 main
 {:args [],
  :fields
  {field1
   {:access :private,
    :initial
    {:args ["black"], :pclass simple-pclass, :type :pclass-ctor},
    :observable false}},
  :methods
  {initialize
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Initialize",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   main
   [{:args [],
     :betweens [],
     :body
     [{:type :method-fn,
       :method-ref
       {:type :symbol-ref, :names [this test-of-various-statements]},
       :args []}],
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Main",
     :post true,
     :pre true,
     :primitive false,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   one-arg-method
   [{:args [x],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [x],
     :display-name "One Arg Method",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   test-of-various-statements
   [{:args [],
     :betweens [],
     :body
     [{:type :sequence,
       :body
       [{:type :method-fn,
         :method-ref {:type :symbol-ref, :names [this one-arg-method]},
         :args [{:type :field-ref, :names [field1 simple2]}]}
        {:type :assert,
         :condition
         {:type :equal,
          :args [{:type :state-variable, :name foo} :illuminated]},
         :body nil,
         :temporal-constraints [{:type :bounds, :value [3 5]}]}
        {:type :ask,
         :condition
         {:type :equal,
          :args [{:type :state-variable, :name bar} :dead]},
         :body nil,
         :temporal-constraints [{:type :bounds, :value [4 7]}]}
        {:type :ask,
         :condition
         {:type :equal,
          :args [{:type :field-ref, :names [field1 simple2]} "white"]},
         :body nil,
         :temporal-constraints [{:type :bounds, :value [4 7]}]}
        {:type :tell,
         :condition
         {:type :equal,
          :args [{:type :state-variable, :name door} :open]}}
        {:type :method-fn,
         :method-ref {:type :symbol-ref, :names [this initialize]},
         :args []}]}],
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Test Of Various Statements",
     :post true,
     :pre true,
     :primitive false,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}]},
  :type :pclass},
 simple-pclass
 {:args [simple2-initial],
  :fields
  {simple1 {:access :private, :initial "white", :observable true},
   simple2
   {:access :private,
    :initial {:names [simple2-initial], :type :pclass-arg-ref},
    :observable true}},
  :methods
  {simple-method
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Simple Method",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}]},
  :type :pclass}}
