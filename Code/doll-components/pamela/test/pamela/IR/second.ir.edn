{first-tpn {:args [plnt], :meta {:doc "Placeholder. "}, :type :pclass},
 first-tpn-htn
 {:args [plnt],
  :meta {:doc "A example with constraints. "},
  :methods
  {do-a-and-b
   [{:args [],
     :betweens [],
     :body
     [{:type :sequence,
       :body
       [{:type :method-fn,
         :method-ref {:type :pclass-arg-ref, :names [plnt do-a]},
         :args [],
         :label :a,
         :temporal-constraints [{:type :bounds, :value [2 4]}]}
        {:type :method-fn,
         :method-ref {:type :pclass-arg-ref, :names [plnt do-b]},
         :args [],
         :label :b,
         :temporal-constraints [{:type :bounds, :value [3 6]}]}],
       :label :do-a-and-b}],
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Do A And B",
     :post true,
     :pre true,
     :primitive false,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   do-choice
   [{:args [],
     :betweens [],
     :body
     [{:type :choose,
       :body
       [{:type :choice,
         :body
         [{:type :method-fn,
           :method-ref {:type :symbol-ref, :names [this do-d-and-e]},
           :args []}]}
        {:type :choice,
         :body
         [{:type :method-fn,
           :method-ref {:type :symbol-ref, :names [this do-f-and-g]},
           :args []}]}],
       :label :do-choice}],
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Do Choice",
     :post true,
     :pre true,
     :primitive false,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   do-choice-and-c
   [{:args [],
     :betweens [],
     :body
     [{:type :sequence,
       :body
       [{:type :method-fn,
         :method-ref {:type :symbol-ref, :names [this do-choice]},
         :args []}
        {:type :method-fn,
         :method-ref {:type :pclass-arg-ref, :names [plnt do-c]},
         :args [],
         :label :c,
         :temporal-constraints [{:type :bounds, :value [85 90]}]}],
       :label :do-choice-and-c}],
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Do Choice And C",
     :post true,
     :pre true,
     :primitive false,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   do-d-and-e
   [{:args [],
     :betweens [],
     :body
     [{:type :sequence,
       :body
       [{:type :method-fn,
         :method-ref {:type :pclass-arg-ref, :names [plnt do-d]},
         :args [],
         :label :d,
         :cost 1,
         :reward 2,
         :temporal-constraints [{:type :bounds, :value [1 7]}]}
        {:type :method-fn,
         :method-ref {:type :pclass-arg-ref, :names [plnt do-e]},
         :args [],
         :label :e,
         :cost 2,
         :reward 1,
         :temporal-constraints [{:type :bounds, :value [9 16]}]}],
       :label :do-d-and-e}],
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Do D And E",
     :post true,
     :pre true,
     :primitive false,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   do-f-and-g
   [{:args [],
     :betweens [],
     :body
     [{:type :sequence,
       :body
       [{:type :method-fn,
         :method-ref {:type :pclass-arg-ref, :names [plnt do-f]},
         :args [],
         :label :f,
         :cost 3,
         :reward 1,
         :temporal-constraints [{:type :bounds, :value [1 3]}]}
        {:type :method-fn,
         :method-ref {:type :pclass-arg-ref, :names [plnt do-g]},
         :args [],
         :label :g,
         :cost 4,
         :temporal-constraints [{:type :bounds, :value [2 5]}]}],
       :label :do-f-and-g}],
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Do F And G",
     :post true,
     :pre true,
     :primitive false,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   start
   [{:args [],
     :betweens
     [{:type :between,
       :from :do-choice,
       :to :b,
       :temporal-constraints [{:type :bounds, :value [1 101]}]}
      {:type :between-starts,
       :from :c,
       :to :b,
       :temporal-constraints [{:type :bounds, :value [2 46]}],
       :cost<= 8}
      {:type :between-ends,
       :from :b,
       :to :c,
       :temporal-constraints [{:type :bounds, :value [3 57]}],
       :reward>= 9}],
     :body
     [{:type :parallel,
       :body
       [{:type :method-fn,
         :method-ref {:type :symbol-ref, :names [this do-a-and-b]},
         :args []}
        {:type :method-fn,
         :method-ref
         {:type :symbol-ref, :names [this do-choice-and-c]},
         :args []}],
       :label :start,
       :temporal-constraints [{:type :bounds, :value [1 100]}]}],
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Start",
     :doc "Simple TPN with constraints",
     :post true,
     :pre true,
     :primitive false,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}]},
  :type :pclass},
 main
 {:args [],
  :fields
  {plnt
   {:access :private,
    :initial {:args [], :pclass plant, :type :pclass-ctor},
    :observable false},
   tpn
   {:access :private,
    :initial
    {:args [{:type :field-ref, :names [plnt]}],
     :pclass first-tpn,
     :type :pclass-ctor},
    :observable false}},
  :type :pclass},
 main-htn
 {:args [],
  :fields
  {plnt
   {:access :private,
    :initial {:args [], :pclass plant, :type :pclass-ctor},
    :observable false},
   tpn
   {:access :private,
    :initial
    {:args [{:type :field-ref, :names [plnt]}],
     :pclass first-tpn-htn,
     :type :pclass-ctor},
    :observable false}},
  :type :pclass},
 plant
 {:args [],
  :meta {:doc "The Plant API"},
  :methods
  {do-a
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Do A",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [2 4]}]}],
   do-b
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Do B",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [3 6]}]}],
   do-c
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Do C",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [85 90]}]}],
   do-d
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Do D",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [1 7]}]}],
   do-e
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Do E",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [9 16]}]}],
   do-f
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Do F",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [1 3]}]}],
   do-g
   [{:args [],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Do G",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [2 5]}]}]},
  :type :pclass}}
