{coverage-demo
 {:args [],
  :fields
  {run
   {:access :private,
    :initial
    {:args [{:type :field-ref, :names [sp1]}],
     :pclass coverage-test,
     :type :pclass-ctor},
    :observable false},
   sp1
   {:access :private,
    :initial
    {:args [],
     :pclass simpleplant,
     :plant-id "sp1",
     :plant-interface "RMQ",
     :plant-part "mypart",
     :type :pclass-ctor},
    :observable false}},
  :type :pclass},
 coverage-test
 {:args [plant],
  :meta {:doc "Coverage Test"},
  :methods
  {copy
   [{:args [],
     :betweens [],
     :body
     [{:type :choose,
       :body
       [{:type :choice,
         :body
         [{:type :method-fn,
           :method-ref {:type :pclass-arg-ref, :names [plant scp]},
           :args ["bigfile" "me@192.168.11.100:~me/copyofbigfile"]}],
         :probability 0.66,
         :condition
         {:type :equal,
          :args
          [{:type :mode-ref,
            :mode-ref {:type :symbol-ref, :names [this]},
            :mode :networked}
           true]}}
        {:type :choice,
         :body
         [{:type :method-fn,
           :method-ref {:type :pclass-arg-ref, :names [plant cp]},
           :args ["bigfile" "copyofbigfile"],
           :cost 5,
           :reward 1}],
         :probability 0.33,
         :condition
         {:type :equal,
          :args
          [{:type :mode-ref,
            :mode-ref {:type :symbol-ref, :names [this]},
            :mode :local}
           true]}}]}],
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Copy",
     :post true,
     :pre true,
     :primitive false,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   main
   [{:args [],
     :betweens
     [{:type :between,
       :from :xfer,
       :to :work,
       :temporal-constraints [{:type :bounds, :value [13 17]}],
       :cost<= 7,
       :reward>= 1}],
     :body
     [{:type :sequence,
       :body
       [{:type :delay,
         :body nil,
         :temporal-constraints [{:type :bounds, :value [3 3]}],
         :label :initial-delay,
         :controllable false,
         :cost<= 2,
         :reward>= 1}
        {:type :method-fn,
         :method-ref {:type :symbol-ref, :names [this transfer]},
         :args [],
         :temporal-constraints [{:type :bounds, :value [0 30]}],
         :label :xfer}
        {:type :method-fn,
         :method-ref {:type :symbol-ref, :names [this work]},
         :args [],
         :temporal-constraints [{:type :bounds, :value [10 40]}],
         :label :work}
        {:type :method-fn,
         :method-ref {:type :symbol-ref, :names [this copy]},
         :args [],
         :temporal-constraints [{:type :bounds, :value [20 50]}],
         :label :copy}],
       :label :everything,
       :cost<= 4,
       :reward>= 2}],
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Main",
     :doc "The HTN",
     :post true,
     :pre true,
     :primitive false,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   transfer
   [{:args [],
     :betweens [],
     :body
     [{:type :choose,
       :body
       [{:type :choice,
         :body
         [{:type :method-fn,
           :method-ref {:type :pclass-arg-ref, :names [plant scp]},
           :args ["bigfile" "me@192.168.11.100:~me/copyofbigfile"],
           :temporal-constraints [{:type :bounds, :value [0 9]}]}],
         :cost 2.0,
         :reward 4}
        {:type :choice,
         :body
         [{:type :method-fn,
           :method-ref {:type :pclass-arg-ref, :names [plant cp]},
           :args ["bigfile" "copyofbigfile"],
           :temporal-constraints [{:type :bounds, :value [10 19]}]}],
         :cost 1.0,
         :reward 1}
        {:type :choice,
         :body
         [{:type :method-fn,
           :method-ref {:type :pclass-arg-ref, :names [plant shell]},
           :args ["ls" "-lart" ">" "foo"],
           :temporal-constraints [{:type :bounds, :value [20 29]}]}],
         :cost 3.0,
         :reward 10}],
       :cost<= 100,
       :reward>= 5,
       :min 1,
       :max 3}],
     :controllable true,
     :cost 0,
     :display-args [],
     :display-name "Transfer",
     :post true,
     :pre true,
     :primitive false,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   work
   [{:args [],
     :betweens
     [{:type :between-starts,
       :from :hardwork,
       :to :python,
       :temporal-constraints [{:type :bounds, :value [50 :infinity]}]}
      {:type :between-ends,
       :from :hardwork,
       :to :python,
       :temporal-constraints [{:type :bounds, :value [0 5]}]}],
     :body
     [{:type :parallel,
       :body
       [{:type :method-fn,
         :method-ref {:type :pclass-arg-ref, :names [plant hardwork]},
         :args [10],
         :temporal-constraints [{:type :bounds, :value [10 20]}],
         :label :hardwork}
        {:type :method-fn,
         :method-ref {:type :pclass-arg-ref, :names [plant python]},
         :args ["myscript.py" "2" "3" "4" "5"],
         :temporal-constraints [{:type :bounds, :value [0 99]}],
         :label :python}],
       :cost<= 11,
       :reward>= 6}],
     :controllable false,
     :cost 0,
     :display-args [],
     :display-name "Work",
     :post true,
     :pre true,
     :primitive false,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}]},
  :modes {:local true, :networked true},
  :type :pclass},
 simpleplant
 {:args [],
  :meta {:doc "The Simple Plant Example"},
  :methods
  {cp
   [{:args [fromfile tofile],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [fromfile tofile],
     :display-name "Copy",
     :doc "local file copy",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   hardwork
   [{:args [time],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [time],
     :display-name "Hardwork",
     :doc "Simulated work with a simulated failure",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [1 20]}]}],
   python
   [{:args [script options arg1 arg2 arg3],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [script options arg1 arg2 arg3],
     :display-name "Python",
     :doc "Runs a python script",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}]}],
   scp
   [{:args [fromfile tofile],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [fromfile tofile],
     :display-name "Scp",
     :doc "Secure network file copy",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [10 20]}]}],
   shell
   [{:args [cmd arg1 arg2 arg3],
     :betweens [],
     :body nil,
     :controllable false,
     :cost 0,
     :display-args [cmd arg1 arg2 arg3],
     :display-name "Shell",
     :doc "Runs a command-line program",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 3]}]}],
   stop
   [{:args [area],
     :betweens [],
     :body nil,
     :controllable true,
     :cost 0,
     :display-args [area],
     :display-name "Stop",
     :doc "Stops the plant",
     :post true,
     :pre true,
     :primitive true,
     :probability 1.0,
     :reward 0,
     :temporal-constraints [{:type :bounds, :value [0 1]}]}]},
  :type :pclass}}
