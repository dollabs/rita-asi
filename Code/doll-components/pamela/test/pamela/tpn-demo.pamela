;; Copyright Â© 2016 Dynamic Object Language Labs Inc.
;;
;; This software is licensed under the terms of the
;; Apache License, Version 2.0 which can be found in
;; the file LICENSE at the root of this distribution.

;;; Acknowledgement and Disclaimer:
;;; This material is based upon work supported by the Army Contracting
;;; and DARPA under contract No. W911NF-15-C-0005.
;;; Any opinions, findings and conclusions or recommendations expressed
;;; in this material are those of the author(s) and do necessarily reflect the
;;; views of the Army Contracting Command and DARPA.

(defpclass plant []
  :meta {:version "0.2.0"
         :doc "The Plant API"}
  :methods [(defpmethod track-elephant
              {:doc "Track Elephant"
               :bounds [150 180]}
              [])
            (defpmethod watch-right-hemisphere
              {:doc "Watch Right Hemisphere"
               :bounds [10 20]}
              [])
            (defpmethod watch-left-hemisphere
              {:doc "Watch Left Hemisphere"}
              [])
            (defpmethod take-move-low-res-images
              {:doc "Take and Move Low Res Image"
               :bounds [0 3]}
              [])
            (defpmethod take-high-res-images
              {:doc "Take High Res Image"
               :bounds [0 3]}
              [])
            (defpmethod move-high-res-images
              {:doc "Move High Res Image"
               :bounds [0 4]}
              [])
            (defpmethod take-medium-res-images
              {:doc "Take Medium Res Image"
               :bounds [0 3]}
              [])
            (defpmethod move-medium-res-images
              {:doc "Move Medium Res Image"
               :bounds [0 4]}
              [])
            (defpmethod picture-analysis-type-1
              {:doc "Picture Analysis Type-1"
               :bounds [0 6]}
              [])
            (defpmethod picture-analysis-type-2-fast
              {:doc "Picture Analysis Type-2: Fast"
               :bounds [0 10]}
              [])
            (defpmethod picture-analysis-type-2-slow
              {:doc "Picture Analysis Type-2: Slow"
               :bounds [0 10]}
              [])
            (defpmethod picture-analysis-type-3
              {:doc "Picture Analysis Type-3"
               :bounds [0 7]}
              [])
            (defpmethod picture-distribution
              {:doc "Picture Distribution"
               :bounds [0 5]}
              [])
            (defpmethod pre-picture-distribution
              {:doc "Pre Picture Distribution"
               :bounds [0 5]}
              [])
            ])

;; NOTE: the tpn pclass no longer takes an argument with the assumption
;; that another zero-arg class will be the plant: instead an explicit
;; plant pclass is instanciated as a field.
(defpclass tpn []
  :meta {:version "0.2.0"
         :doc "TPN Demo"}
  :fields {plant (plant :id "100")}
  :methods [(defpmethod elephant
              {:doc "the tpn"}
              []
              (parallel
                (plant.track-elephant :bounds [160 170])
                (parallel
                  (parallel :bounds [20 25]
                    (plant.watch-right-hemisphere) ;; use default bounds
                    (plant.watch-left-hemisphere))
                  (sequence :bounds [123 456] ;; these bounds are just for testing!
                     (choose
                       (choice (sequence
                         (plant.take-high-res-images :bounds [0 3])
                         (plant.move-high-res-images :bounds [0 4])))
                       (choice (plant.take-move-low-res-images :bounds [0 3]))
                       (choice :bounds [78 90] ;; these bounds are just for testing!
                         (sequence
                           (plant.take-medium-res-images :bounds [0 3])
                           (plant.move-medium-res-images :bounds [0 4]))))
                     (plant.pre-picture-distribution)
                     (parallel
                       (plant.picture-analysis-type-1 :bounds [0 6])
                       (choose
                         (choice (plant.picture-analysis-type-2-slow :bounds [0 10]))
                         (choice (plant.picture-analysis-type-2-fast :bounds [0 10])))
                       (plant.picture-analysis-type-3 :bounds [0 7]))
                     (plant.picture-distribution :bounds [0 5])))))])

; Create TPN using tpn command
; ./bin/pamela -i test/pamela/tpn-demo.pamela -o tpn-demo.tpn.json -c main:tpn:elephant tpn
(defpclass main []
           :fields {tpn (tpn :id "100")})
