;; Copyright Â© 2016 Dynamic Object Language Labs Inc.
;;
;; This software is licensed under the terms of the
;; Apache License, Version 2.0 which can be found in
;; the file LICENSE at the root of this distribution.

(defpclass plant []
           :meta {:doc "The Plant API"}

           :methods [(defpmethod do-a {:bounds [2 4]} [])
                     (defpmethod do-b {:bounds [3 6]} [])
                     (defpmethod do-c {:bounds [85 90]} [])
                     (defpmethod do-d {:bounds [1 7]} [])
                     (defpmethod do-e {:bounds [9 16]} [])
                     (defpmethod do-f {:bounds [1 3]} [])
                     (defpmethod do-g {:bounds [2 5]} [])
                     ])

; pamela -i first.pamela -o first.cfm.tpn.json -c main:tpn:start tpn
;; This is a placeholder for the more complete, TPN-centric version:
(defpclass first-tpn [plnt]
  :meta {:doc "Placeholder. "})
;; Uncomment the following if you'd like to generate the TPN
;; (defpclass first-tpn [plnt]
;;            :meta {:doc "A example with constraints. "}

;;            :methods [(defpmethod start
;;                                  {:doc "Simple TPN with constraints"}
;;                                  []
;;                                  ; TODO Add cost < C and reward > R when language supports it.
;;                                  (parallel :bounds [1 100]
;;                                            (sequence (plnt.do-a)
;;                                                      (plnt.do-b :label :b)
;;                                                      )
;;                                            (sequence
;;                                              (choose :label :choice ;:max-cost 10 :min-reward 5
;;                                                      (choice
;;                                                        (sequence
;;                                                          (plnt.do-d :cost 1 :reward 2)
;;                                                          (plnt.do-e :cost 2 :reward 1)))
;;                                                      (choice
;;                                                        (sequence
;;                                                          (plnt.do-f :cost 3 :reward 1)
;;                                                          (plnt.do-g :cost 4))))
;;                                              (plnt.do-c)))
;;                                  (between :choice :b :bounds [1 100]))])

; pamela -i first.pamela -o first -t "(main-htn.tpn.start)" htn
; Note: Comment `first-tpn` class before using htn task. Otherwise this file will not compile
(defpclass first-tpn-htn [plnt]
           :meta {:doc "A example with constraints. "}

           :methods [(defpmethod start
                                 {:doc "Simple TPN with constraints"}
                                 []
                                 ; TODO Add cost < C and reward > R when language supports it.
                                 (parallel :bounds [1 100]
                                           (do-a-and-b)
                                           (do-choice-and-c))
                                 (between :choice :b :bounds [1 100]))

                     (defpmethod do-a-and-b []
                                 (sequence (plnt.do-a :bounds [2 4])
                                           (plnt.do-b :label :b :bounds [3 6])
                                           ))
                     (defpmethod do-choice-and-c []
                                 (sequence
                                   (do-choice)
                                   (plnt.do-c :bounds [85 90])))

                     (defpmethod do-choice []
                                 (choose :label :choice ;:max-cost 10 :min-reward 5
                                         (choice
                                           (do-d-and-e))
                                         (choice
                                           (do-f-and-g))))
                     (defpmethod do-d-and-e []
                                 (sequence
                                   (plnt.do-d :cost 1 :reward 2 :bounds [1 7])
                                   (plnt.do-e :cost 2 :reward 1 :bounds [9 16])))
                     (defpmethod do-f-and-g []
                                 (sequence
                                   (plnt.do-f :cost 3 :reward 1 :bounds [1 3])
                                   (plnt.do-g :cost 4 :bounds [2 5])))
                     ])
(defpclass main []
           :fields {plnt (plant)
                    tpn (first-tpn plnt)})

(defpclass main-htn []
           :fields {plnt (plant)
                    tpn (first-tpn-htn plnt)})
