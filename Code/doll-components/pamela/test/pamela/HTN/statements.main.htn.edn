{:hedge-28 {:end-node :hem-18, :type :edge, :uid :hedge-28},
 :hedge-30
 {:display-name "1", :end-node :hem-25, :type :edge, :uid :hedge-30},
 :hedge-32 {:end-node :hpt-20, :type :edge, :uid :hedge-32},
 :hedge-33 {:end-node :hpt-21, :type :edge, :uid :hedge-33},
 :hedge-34 {:end-node :hpt-22, :type :edge, :uid :hedge-34},
 :hedge-35 {:end-node :hpt-23, :type :edge, :uid :hedge-35},
 :hedge-36 {:end-node :hpt-24, :type :edge, :uid :hedge-36},
 :hem-18
 {:args [],
  :display-args [],
  :display-name "Main",
  :edges [:hedge-30],
  :incidence-set #{:hedge-28},
  :network :net-29,
  :type :htn-expanded-method,
  :uid :hem-18},
 :hem-25
 {:args [],
  :display-args [],
  :display-name "Test Of Various Statements",
  :edges [],
  :incidence-set #{},
  :network :net-31,
  :type :htn-expanded-method,
  :uid :hem-25},
 :henpt-16
 {:display-name "main",
  :edges [:hedge-28],
  :incidence-set #{},
  :type :htn-expanded-nonprimitive-task,
  :uid :henpt-16},
 :henpt-17
 {:args [],
  :argsmap {},
  :display-args [],
  :display-name "Test Of Various Statements",
  :edges [],
  :incidence-set #{},
  :name "test-of-various-statements",
  :type :htn-expanded-nonprimitive-task,
  :uid :henpt-17},
 :hpt-19
 {:args
  [{:type :pclass-ctor,
    :uid :pclass-2,
    :pclass simple-pclass,
    :args ["black"],
    :ancestry [[:pclass-1 field1]]}],
  :argsmap
  {"x"
   {:ancestry [[:pclass-1 field1]],
    :args ["black"],
    :pclass simple-pclass,
    :type :pclass-ctor,
    :uid :pclass-2}},
  :display-args [field1.simple2],
  :display-name "One Arg Method",
  :edges [:hedge-32],
  :incidence-set #{},
  :name "one-arg-method",
  :type :htn-primitive-task,
  :uid :hpt-19},
 :hpt-20
 {:args
  [{:type :equal,
    :args [{:type :state-variable, :name foo} :illuminated]}],
  :argsmap
  {"condition"
   {:args [{:type :state-variable, :name foo} :illuminated],
    :type :equal}},
  :display-args [(= foo :illuminated)],
  :display-name "Assert",
  :edges [:hedge-33],
  :incidence-set #{:hedge-32},
  :name "assert",
  :plant-id "bsm1",
  :type :htn-primitive-task,
  :uid :hpt-20},
 :hpt-21
 {:args
  [{:type :equal, :args [{:type :state-variable, :name bar} :dead]}],
  :argsmap
  {"condition"
   {:args [{:type :state-variable, :name bar} :dead], :type :equal}},
  :display-args [(= bar :dead)],
  :display-name "Ask",
  :edges [:hedge-34],
  :incidence-set #{:hedge-33},
  :name "ask",
  :plant-id "bsm1",
  :type :htn-primitive-task,
  :uid :hpt-21},
 :hpt-22
 {:args
  [{:type :equal,
    :args [{:type :field-ref, :names [field1 simple2]} "white"]}],
  :argsmap
  {"condition"
   {:args [{:type :field-ref, :names [field1 simple2]} "white"],
    :type :equal}},
  :display-args [(= field1.simple2 "white")],
  :display-name "Ask",
  :edges [:hedge-35],
  :incidence-set #{:hedge-34},
  :name "ask",
  :plant-id "bsm1",
  :type :htn-primitive-task,
  :uid :hpt-22},
 :hpt-23
 {:args
  [{:type :equal, :args [{:type :state-variable, :name door} :open]}],
  :argsmap
  {"condition"
   {:args [{:type :state-variable, :name door} :open], :type :equal}},
  :display-args [(= door :open)],
  :display-name "Tell",
  :edges [:hedge-36],
  :incidence-set #{:hedge-35},
  :name "tell",
  :plant-id "bsm1",
  :type :htn-primitive-task,
  :uid :hpt-23},
 :hpt-24
 {:args [],
  :argsmap {},
  :display-args [],
  :display-name "Initialize",
  :edges [],
  :incidence-set #{:hedge-36},
  :name "initialize",
  :type :htn-primitive-task,
  :uid :hpt-24},
 :net-27
 {:display-name "main",
  :rootnodes #{:henpt-16},
  :type :htn-network,
  :uid :net-27},
 :net-29
 {:display-name "Main",
  :rootnodes #{:henpt-17},
  :type :htn-network,
  :uid :net-29},
 :net-31
 {:display-name "Test Of Various Statements",
  :rootnodes #{:hpt-19},
  :type :htn-network,
  :uid :net-31},
 :network :net-27}
