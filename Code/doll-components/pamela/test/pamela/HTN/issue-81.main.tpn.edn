{:act-17
 {:args
  [{:type :method-arg-ref,
    :names [a data1],
    :pclass simpleplant,
    :plant-id "sp1",
    :plant-part "mypart",
    :plant-interface "RMQ"}
   {:type :method-arg-ref,
    :names [b data2],
    :pclass simpleplant,
    :plant-id "sp2",
    :plant-part "mypart2",
    :plant-interface "RMQ"}],
  :argsmap
  {"fromfile"
   {:names [a data1],
    :pclass simpleplant,
    :plant-id "sp1",
    :plant-interface "RMQ",
    :plant-part "mypart",
    :type :method-arg-ref},
   "tofile"
   {:names [b data2],
    :pclass simpleplant,
    :plant-id "sp2",
    :plant-interface "RMQ",
    :plant-part "mypart2",
    :type :method-arg-ref}},
  :command "cp",
  :constraints #{},
  :controllable false,
  :cost 0,
  :display-args [a.data1 b.data2],
  :display-name "Copy",
  :end-node :node-28,
  :htn-node :hem-30,
  :name
  "Copy({:type :method-arg-ref, :names [a data1], :pclass simpleplant, :plant-id \"sp1\", :plant-part \"mypart\", :plant-interface \"RMQ\"} {:type :method-arg-ref, :names [b data2], :pclass simpleplant, :plant-id \"sp2\", :plant-part \"mypart2\", :plant-interface \"RMQ\"})",
  :plant-id "sp1",
  :plant-interface "RMQ",
  :plant-part "mypart",
  :reward 0,
  :tpn-type :activity,
  :uid :act-17},
 :act-27
 {:args
  ["echo"
   :myoptions
   {:type :field-ref,
    :names [p1 data1],
    :ancestry [[:pclass-3] [:pclass-1 sp2]]}
   {:type :field-ref,
    :names [p2 data2],
    :ancestry [[:pclass-3] [:pclass-1 sp2]]}],
  :argsmap
  {"arg1" :myoptions,
   "arg2"
   {:ancestry [[:pclass-3] [:pclass-1 sp2]],
    :names [p1 data1],
    :type :field-ref},
   "arg3"
   {:ancestry [[:pclass-3] [:pclass-1 sp2]],
    :names [p2 data2],
    :type :field-ref},
   "cmd" "echo"},
  :command "shell",
  :constraints #{:tc-26},
  :controllable false,
  :cost 0,
  :display-args ["echo" :myoptions p1.data1 p2.data2],
  :display-name "Shell",
  :end-node :node-1,
  :htn-node :hem-32,
  :name
  "Shell(\"echo\" :myoptions {:type :field-ref, :names [p1 data1], :ancestry [[:pclass-3] [:pclass-1 sp2]]} {:type :field-ref, :names [p2 data2], :ancestry [[:pclass-3] [:pclass-1 sp2]]})",
  :plant-id "sp2",
  :plant-interface "RMQ",
  :plant-part "mypart2",
  :reward 0,
  :tpn-type :activity,
  :uid :act-27},
 :act-9
 {:args
  [{:type :pclass-arg-ref,
    :names [plant2 data1],
    :pclass simpleplant,
    :plant-id "sp2",
    :plant-part "mypart2",
    :plant-interface "RMQ"}
   {:type :pclass-arg-ref,
    :names [plant2 data2],
    :pclass simpleplant,
    :plant-id "sp2",
    :plant-part "mypart2",
    :plant-interface "RMQ"}],
  :argsmap
  {"fromfile"
   {:names [plant2 data1],
    :pclass simpleplant,
    :plant-id "sp2",
    :plant-interface "RMQ",
    :plant-part "mypart2",
    :type :pclass-arg-ref},
   "tofile"
   {:names [plant2 data2],
    :pclass simpleplant,
    :plant-id "sp2",
    :plant-interface "RMQ",
    :plant-part "mypart2",
    :type :pclass-arg-ref}},
  :command "scp",
  :constraints #{:tc-8},
  :controllable false,
  :cost 0,
  :display-args [plant2.data1 plant2.data2],
  :display-name "Scp",
  :end-node :node-18,
  :htn-node :hem-28,
  :name
  "Scp({:type :pclass-arg-ref, :names [plant2 data1], :pclass simpleplant, :plant-id \"sp2\", :plant-part \"mypart2\", :plant-interface \"RMQ\"} {:type :pclass-arg-ref, :names [plant2 data2], :pclass simpleplant, :plant-id \"sp2\", :plant-part \"mypart2\", :plant-interface \"RMQ\"})",
  :plant-id "sp2",
  :plant-interface "RMQ",
  :plant-part "mypart2",
  :reward 0,
  :tpn-type :activity,
  :uid :act-9},
 :net-3
 {:begin-node :node-10,
  :end-node :node-1,
  :tpn-type :network,
  :uid :net-3},
 :network-id :net-3,
 :node-1
 {:activities #{},
  :constraints #{},
  :incidence-set #{:act-27},
  :tpn-type :state,
  :uid :node-1},
 :node-10
 {:activities #{:act-9},
  :constraints #{},
  :end-node :node-1,
  :htn-node :hem-25,
  :incidence-set #{},
  :tpn-type :state,
  :uid :node-10},
 :node-18
 {:activities #{:act-17},
  :constraints #{},
  :htn-node :hem-30,
  :incidence-set #{:act-9},
  :tpn-type :state,
  :uid :node-18},
 :node-28
 {:activities #{:act-27},
  :constraints #{},
  :htn-node :hem-32,
  :incidence-set #{:act-17},
  :tpn-type :state,
  :uid :node-28},
 :tc-26
 {:end-node :node-1,
  :tpn-type :temporal-constraint,
  :uid :tc-26,
  :value [0 3]},
 :tc-8
 {:end-node :node-18,
  :tpn-type :temporal-constraint,
  :uid :tc-8,
  :value [10 20]}}
