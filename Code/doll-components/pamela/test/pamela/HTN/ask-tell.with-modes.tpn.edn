{:act-13
 {:args
  [{:type :and,
    :args
    [{:type :equal, :args [{:type :state-variable, :name door} "open"]}
     {:type :mode-ref,
      :mode-ref {:type :symbol-ref, :names [this]},
      :mode :running}]}],
  :argsmap
  {"condition"
   {:args
    [{:type :equal, :args [{:type :state-variable, :name door} "open"]}
     {:type :mode-ref,
      :mode-ref {:type :symbol-ref, :names [this]},
      :mode :running}],
    :type :and}},
  :command "ask",
  :constraints #{:tc-12},
  :controllable false,
  :display-args [(and (= door "open") :running)],
  :display-name "Ask",
  :end-node :node-18,
  :htn-node :hem-37,
  :name
  "Ask({:type :and, :args [{:type :equal, :args [{:type :state-variable, :name door} \"open\"]} {:type :mode-ref, :mode-ref {:type :symbol-ref, :names [this]}, :mode :running}]})",
  :plant-id "bsm1",
  :tpn-type :activity,
  :uid :act-13},
 :act-17
 {:args [],
  :argsmap {},
  :command "delayed-gratification",
  :constraints #{},
  :controllable false,
  :cost 0,
  :display-args [],
  :display-name "Delayed Gratification",
  :end-node :node-4,
  :htn-node :hem-37,
  :name "Delayed Gratification",
  :reward 0,
  :tpn-type :activity,
  :uid :act-17},
 :act-32
 {:args
  [{:type :equal, :args [{:type :state-variable, :name door} "open"]}],
  :argsmap
  {"condition"
   {:args [{:type :state-variable, :name door} "open"], :type :equal}},
  :command "tell",
  :constraints #{},
  :controllable false,
  :display-args [(= door "open")],
  :display-name "Tell",
  :end-node :node-21,
  :htn-node :hem-41,
  :name
  "Tell({:type :equal, :args [{:type :state-variable, :name door} \"open\"]})",
  :plant-id "bsm1",
  :tpn-type :activity,
  :uid :act-32},
 :da-28
 {:constraints #{:tc-27},
  :controllable false,
  :end-node :node-33,
  :htn-node :hem-41,
  :name "Delay",
  :tpn-type :delay-activity,
  :uid :da-28},
 :na-10
 {:constraints #{},
  :end-node :node-6,
  :tpn-type :null-activity,
  :uid :na-10},
 :na-15
 {:constraints #{},
  :end-node :node-14,
  :tpn-type :null-activity,
  :uid :na-15},
 :na-25
 {:constraints #{},
  :end-node :node-6,
  :tpn-type :null-activity,
  :uid :na-25},
 :na-30
 {:constraints #{},
  :end-node :node-29,
  :tpn-type :null-activity,
  :uid :na-30},
 :net-3
 {:begin-node :node-7,
  :end-node :node-6,
  :tpn-type :network,
  :uid :net-3},
 :network-id :net-3,
 :node-14
 {:activities #{:act-13},
  :constraints #{},
  :end-node :node-4,
  :htn-node :hem-37,
  :incidence-set #{:na-15},
  :tpn-type :state,
  :uid :node-14},
 :node-18
 {:activities #{:act-17},
  :constraints #{},
  :htn-node :hem-37,
  :incidence-set #{:act-13},
  :tpn-type :state,
  :uid :node-18},
 :node-21
 {:activities #{:na-25},
  :constraints #{},
  :incidence-set #{:act-32},
  :tpn-type :state,
  :uid :node-21},
 :node-29
 {:activities #{:da-28},
  :constraints #{},
  :end-node :node-21,
  :htn-node :hem-41,
  :incidence-set #{:na-30},
  :tpn-type :state,
  :uid :node-29},
 :node-33
 {:activities #{:act-32},
  :constraints #{},
  :htn-node :hem-41,
  :incidence-set #{:da-28},
  :tpn-type :state,
  :uid :node-33},
 :node-4
 {:activities #{:na-10},
  :constraints #{},
  :incidence-set #{:act-17},
  :tpn-type :state,
  :uid :node-4},
 :node-6
 {:activities #{},
  :constraints #{},
  :incidence-set #{:na-25 :na-10},
  :tpn-type :p-end,
  :uid :node-6},
 :node-7
 {:activities #{:na-30 :na-15},
  :constraints #{},
  :end-node :node-6,
  :htn-node :hem-34,
  :incidence-set #{},
  :tpn-type :p-begin,
  :uid :node-7},
 :tc-12
 {:end-node :node-18,
  :tpn-type :temporal-constraint,
  :uid :tc-12,
  :value [5 30]},
 :tc-27
 {:end-node :node-33,
  :tpn-type :temporal-constraint,
  :uid :tc-27,
  :value [10 10]}}
