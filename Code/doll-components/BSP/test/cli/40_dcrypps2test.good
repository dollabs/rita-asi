((defpclass Top [] :fields {top (AttackPlanner)})
 (defpclass
  AttackPlanner
  []
  :fields
  {anattacker (PlanningAgent), atarget "atarget"}
  :methods
  [(defpmethod
    goal
    []
    (sequence
     (choose
      (choice
       (sequence
        (anattacker.down "/AttackPlanner.gs.RFA")
        (anattacker.launch-PW-guessing "/AttackPlanner.gs.RFA")
        (anattacker.lateral "/AttackPlanner.router.net1")
        (anattacker.up "/AttackPlanner.router")
        (anattacker.launch-backdoor-attack "/AttackPlanner.router")
        (anattacker.lateral "/AttackPlanner.controller.TCPA")
        (anattacker.up "/AttackPlanner.controller")
        (anattacker.launch-PW-guessing "/AttackPlanner.controller")
        (anattacker.lateral "/AttackPlanner.st.TCPA")
        (anattacker.up "/AttackPlanner.st")
        (anattacker.launch-traffic-injection-attack atarget)))
      (choice
       (sequence
        (anattacker.launch-PW-guessing "/AttackPlanner.gs")
        (choose
         (choice
          (sequence
           (anattacker.lateral "/AttackPlanner.mgp")
           (anattacker.launch-supply-chain-attack "/AttackPlanner.mgp")
           (anattacker.lateral "/AttackPlanner.st.TCPA")
           (anattacker.up "/AttackPlanner.st")
           (anattacker.launch-traffic-injection-attack atarget)))
         (choice
          (sequence
           (anattacker.lateral "/AttackPlanner.router")
           (anattacker.launch-phishing-attack "/AttackPlanner.router")
           (anattacker.lateral "/AttackPlanner.st")
           (anattacker.launch-traffic-injection-attack atarget))))))
      (choice
       (sequence
        (anattacker.launch-supply-chain-attack "/AttackPlanner.gs")
        (anattacker.lateral "/AttackPlanner.mgp")
        (anattacker.launch-factory-pw-attack "/AttackPlanner.mgp")
        (anattacker.lateral "/AttackPlanner.st")
        (anattacker.launch-traffic-injection-attack atarget))))))])
 (defpclass
  PlanningAgent
  []
  :methods
  [(defpmethod launch-traffic-injection-attack [arg1])
   (defpmethod lateral [arg1])
   (defpmethod launch-backdoor-attack [arg1])
   (defpmethod down [arg1])
   (defpmethod launch-PW-guessing [arg1])
   (defpmethod launch-factory-pw-attack [arg1])
   (defpmethod up [arg1])
   (defpmethod launch-phishing-attack [arg1])
   (defpmethod launch-supply-chain-attack [arg1])]))
