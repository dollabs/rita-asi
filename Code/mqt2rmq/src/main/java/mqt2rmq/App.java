/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mqt2rmq;

import org.eclipse.paho.client.mqttv3.MqttException;

import java.util.concurrent.LinkedBlockingQueue;

import picocli.CommandLine;
import picocli.CommandLine.Option;

public class App {

    @Option(names = "--mqhost", defaultValue = "192.168.11.103", description = "MQTT Host")
    String mqthost = "192.168.11.103";
    int mqtport = 1883;

    @Option(names = "--host", defaultValue = "192.168.11.100", description = "RMQ Host")
    String rmqhost = "192.168.11.100";

    @Option(names = {"--port", "-p"}, defaultValue = "5672", description = "RMQ port")
    int rmqport = 5672;

    @Option(names = {"--exchange", "-e"}, defaultValue = "rita", description = "RMQ exchange")
    String exchange = "rita";

    @Option(names = {"--simulate-clock", "-c"}, defaultValue = "2", description = "Will publish clock messages at given frequency")
    int clock_frequency = 2;

    @Option(names = {"-h", "--help"}, usageHelp = true, description = "display a help message")
    private boolean helpRequested = false;

    private MqttHelper mqclient;
    private RmqHelper rmqclient;
    LinkedBlockingQueue<String> qu = new LinkedBlockingQueue<>();
    private RecvTh receiver;

    public void go() {

        this.rmqclient = RmqHelper.makeRMQ(rmqhost, rmqport, exchange);
        if (this.rmqclient == null) {
            System.out.println("Error creating RMQ Client: ");
            System.exit(1);
        }

        try {
            this.mqclient = new MqttHelper(qu, mqthost, mqtport);
        } catch (MqttException e) {
            System.out.println("Error creating MQTT Client: " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        }
        this.rmqclient.setMqttHelper(this.mqclient);
        this.receiver = new RecvTh(this.rmqclient, this.qu);
        this.receiver.setClockFrequency(clock_frequency);
        this.receiver.start();
    }

    // TODO Catch Control-C and handle graceful exit
    public static void main(String[] args) {

        App app = new App();
        CommandLine cl = new CommandLine(app);
        cl.parseArgs(args);
        if (app.helpRequested) {
            cl.usage(System.out);
            System.exit(0);
        }

        app.go();
        System.out.println("End of main");
    }
}
