xx is a variable.
yy is a variable.
zz is a story.
vv is a variable.

//// Blocks world
// General knowledge about blocks world problem solving

If the step is "The xx is yy".
Check: The xx is yy.
The end.

If the method is "The xx is yy".
Execute: Call "jdRemember" with xx with yy.
The end.

If the problem is "Put xx on yy".
Intention: Put xx on yy.
The end.

If the intention is "Put xx on yy".
Condition: There is space for xx on yy.
Condition: Verify that nothing is on xx.
Condition: xx is light.
Condition: Atlas is parked.
Method: Move xx to yy.
The end.

If the intention is "Put xx on yy".
Condition: There is space for xx on yy.
Condition: Verify that nothing is on xx.
Condition: xx is heavy.
Condition: Bolt is parked.
Request: Put xx on yy.
The end.

If the condition is "There is space for xx on yy".
Check: Verify that there is space for xx on yy.
Instantiate: zz is supported by yy.
Solve: Get rid of zz.
The end.

If the method is "Verify that there is space for xx on yy".
Execute: Call "jdFindSpace" with xx with yy.
The end.

If the condition is "xx lies on yy".
Check: xx lies on yy.
Solve: Put xx on yy.
The end.

If the condition is "Verify that xx lies on yy".
Check: Verify that xx lies on yy.
Solve: Put xx on yy.
The end.

If the method is "Verify that xx lies on yy".
Execute: Call "jdSupportedBy" with yy with xx.
The end.


If the method is "xx lies on yy".
Execute: Call "jdSupportedBy" with yy with xx.
The end.

If the condition is "Bolt is parked".
Method: Park Bolt.
The end.

If the method is "Park Bolt".
Execute: Call "jdParkFastHand".
The end.

If the condition is "Atlas is parked".
Method: Park Atlas.
The end.

If the method is "Park Atlas".
Execute: Call "jdParkStrongHand".
The end.

If the condition is "xx is light".
Method: Verify that xx is light.
The end.

If the method is "Verify that xx is light".
Execute: Call "jdIsLight" with xx.
The end.

If the condition is "xx is heavy".
Method: Verify that xx is heavy.
The end.

If the method is "Verify that xx is heavy".
Execute: Call "jdIsHeavy" with xx.
The end.

If the condition is "xx is tall".
Method: xx is tall.
The end.

If the method is "xx is tall".
Execute: Call "jdIsTall" with xx.
The end.

If the condition is "Verify that nothing is on xx".
Check: Verify that nothing is on xx.
Instantiate: yy is supported by xx.
Solve: Get rid of yy.
The end.

If the method is "Verify that nothing is on xx".
Execute: Call "jdHasClearTop" with xx.
The end.

If the intention is "Get rid of yy".
Condition: Nothing is on yy.
Condition: yy is light.
Condition: Atlas is parked.
Method: Move yy to table.
The end.

If the intention is "Get rid of yy".
Condition: Nothing is on yy.
Condition: yy is heavy.
Condition: Bolt is parked.
Request: Put yy on table.
The end.

If the problem is "Clear the top of xx".
Intention: Clear the top of xx.
The end.

If the intention is "Clear the top of xx".
Check: Clear the top of xx.
The end.

If the condition is "Clear the top of xx".
Check: Nothing is on xx.
Instantiate: yy is supported by xx.
Solve: Get rid of yy.
The end.

If the problem is "Get rid of yy".
Intention: Get rid of yy.
The end.

If the method is "Move xx to yy".
Execute: Call "jdPutOnWithSpeed" with xx with yy.
The end.

If the request is "Put xx on yy".
Communicate: Put xx on yy.
The end.


If the method is "Make space for xx on yy".
Execute: Call "jdFindSpace" with xx with yy.
The end.

If the problem is "Bind xx to a base".
Intention: Bind xx to a base.
The end.

If the intention is "Bind xx to a base".
Method: Bind xx to a base.
The end.

If the method is "Bind xx to a base".
Execute: Call "jdBind" with xx with base.
The end.

If the problem is "yy is supported by xx".
Intention: yy is supported by xx.
The end.

If the intention is "yy is supported by xx".
Method: yy is supported by xx.
The end.

If the method is "yy is supported by xx".
Execute: Call "jdSupported" with xx with yy.
The end.

