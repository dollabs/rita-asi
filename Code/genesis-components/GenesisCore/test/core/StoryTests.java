package core;

import java.io.IOException;

import org.junit.Assert;
import org.junit.Test;

import connections.signals.BetterSignal;
import utils.Mark;
import frames.entities.Sequence;
import genesis.HeadlessGenesis;

public class StoryTests {

	/**
	 * For now, just use dumb strings to perform regression testing of
	 * story parsing.
	 * 
	 * @param storyPath story under test.
	 * @param intendedParse asString representation of the intended
	 * parse of the story. This is the string that is generated by the
	 * asStringWithoutIndexes method.
	 * @return
	 */
	public static void testStory(String storyPath, String intendedParse){
		try {
			// RLM: This sleep here is to handle a nasty concurrency bug.
			Thread.sleep(1000);
			BetterSignal parsedStory = 
					HeadlessGenesis.getHeadlessGenesis().processStoryFile(storyPath);
		
			Sequence story = parsedStory.get(0, Sequence.class);
		
			String actualParse = story.asStringWithoutIndexes();
			Mark.say(actualParse);
			boolean aligned = intendedParse.equals(actualParse);
			System.out.println(aligned ? "Success!" : "Failure!");
			System.out.println("Expected : " + intendedParse);
			System.out.println("Actual   : " + actualParse);
			Assert.assertTrue(aligned);
		} catch (IOException | InterruptedException e){
			e.printStackTrace();
			Assert.fail();
		}
	}
	
	public final static String darfurTest = "test/darfur-test.txt";
	public final static String intendedDarfurParse = "(sequence story (start you (sequence roles (object story))) (classification nation sudan) (classification region darfur) (classification militia janjaweed) (want sudan (sequence roles (object (cleanse janjaweed (sequence roles (object darfur)))))))";
	@Test(timeout=20000)
	public void testBasicParsing(){
		testStory(darfurTest, intendedDarfurParse);
	}
		
	public final static String if_then_basic = "test/if-then-basic.txt";
	public final static String if_then_basic_intendedParse = "(sequence simple_if-then_rule (start you (sequence roles (object (story simple_if-then_rule)))) (is_called story simple_if-then_rule) (classification person macbeth) (classification person macduff) (kill macbeth (sequence roles (object macduff))) (prediction (sequence conjuction (kill macbeth (sequence roles (object macduff)))) (property macduff dead)) (property macduff dead))";
	@Test(timeout=20000)
	public void testBasicIfThenRule() {
		testStory(if_then_basic, if_then_basic_intendedParse);
	}
	
	public final static String clearMemory = "test/clear-memory.txt";
	public final static String clearMemoryIntendedParse = "(sequence null_story (start you (sequence roles (object (story null_story)))) (is_called story null_story) (classification person robert))";
	@Test(timeout=20000)
	public void testMemoryClearing() throws InterruptedException{
		testStory(clearMemory, clearMemoryIntendedParse);
		testStory(clearMemory, clearMemoryIntendedParse);
		testStory(clearMemory, clearMemoryIntendedParse);
	}
	
}
